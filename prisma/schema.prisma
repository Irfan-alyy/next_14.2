// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  type          String?         @default("user")
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}

model webhook_events {
  id                  String @id @default(auto()) @map("_id") @db.ObjectId
  event_id            String @unique
  event_type          String
  event_time          BigInt
  webhook_received_at DateTime @default(now())
  resource_id         String
  status              String
  client_id           String

  raw_payload         Json
  processed           Boolean @default(false)
  error               String?

  @@index([resource_id])
  @@index([webhook_received_at])
}

model Order {
  id                String    @id @map("_id")
  displayId         String    @unique
  currentState      String    // we'll store raw state for now (e.g., "DENIED")
  type              String
  brand             String
  placedAt          DateTime  @db.Date

  storeId           String   
  store             Store     @relation(fields: [storeId], references: [id])

  eaterId           String   
  eater             Eater     @relation(fields: [eaterId], references: [id])

  cartId            String    @unique
  cart              Cart      @relation(fields: [cartId], references: [id])

  paymentId         String    @unique
  payment           Payment   @relation(fields: [paymentId], references: [id])

  packagingId       String?   @unique
  packaging         Packaging? @relation(fields: [packagingId], references: [id])

  lastEventId       String?   // for idempotency
  createdAt         DateTime  @default(now()) @db.Date

  @@map("orders")
}

model Store {
  id   String @id @map("_id")
  name String
  orders Order[]
  @@map("stores")
}

model Eater {
  id        String @id @map("_id")
  firstName String
  lastName  String?
  phone     String?
  phoneCode String?
  orders    Order[]
  @@map("eaters")
}

model Cart {
  id              String      @id @map("_id")
  fulfillmentIssues Json?
  special_instructions  String?
  items           CartItem[]
  order           Order?
  @@map("carts")
}

model CartItem {
  id                   String @id @map("_id")
  title                String
  externalData         String?
  quantity             Int
  instanceId           String?
  eaterId              String?

  unitPriceAmount      Int
  unitPriceCurrency    String
  totalPriceAmount     Int
  totalPriceCurrency   String
  baseUnitPriceAmount  Int
  baseTotalPriceAmount Int
  special_instructions String?
  selected_modifier_groups Json?

  cartId               String
  cart                 Cart   @relation(fields: [cartId], references: [id])

  menuItemId           String?
  menuItem             MenuItem? @relation(fields: [menuItemId], references: [id])


  @@map("cart_items")
}
model MenuItem {
  id        String   @id @map("_id")   // Uber item.id or your generated UUID
  title     String
  brand     String?  // optional, if you want to tie to store/brand
  cartItems CartItem[]
  @@map("menu_items")
}


model Payment {
  id                 String @id @map("_id")
  totalAmount        Int
  totalCurrency      String
  subTotalAmount     Int
  subTotalCurrency   String
  accounting         Json?
  order              Order?
  @@map("payments")
}

model Packaging {
  id            String @id @map("_id")
  shouldInclude Boolean
  order         Order?
  @@map("packaging")
}